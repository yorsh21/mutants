var isMutant = require('./../modules/mutant-v2');

let dnas_false = {
	dna0:  ["ATCGATCG","CGTACGTA","ATCGATCG","CGTACGTA","ATCGATCG","CGTACGTA","CGTACGTA","ATCGATCG"],
	dna1:  ["ATCGATCG","CGTACGTA","ATCGATCG","CGTACGTA","ATCGATCG","CGTACGTA","CGTACGTA","ATCGATCG"],
	dna2:  ["ATCAATCG","CGGACGTA","ATTGATCG","CGTACGGA","AACGATCG","CGCACGTA","CGGACGTA","ATTGATCG"],
	dna3:  ["ATCGATCA","CGTACATA","ATAGATCG","CGTCCGAA","ATCAATCG","CGTACATA","CGTACATA","ATAGATCG"],
	dna4:  ["ATTGATCG","CGTACTTA","ATCGATCT","TGTACGTA","ATTGATCG","CTTACGTA","CGTACTTA","ATCGATCT"],
	dna5:  ["ACCGATCG","CGTCCGTA","ATCGACCG","CGTCCGTA","ATCGATCC","CGTACCTA","CGTCCGTA","ATCGACCG"],
	dna6:  ["GTCGATCG","CGTACGTA","ATCGATCG","CGTACGTA","ATCGATCG","CGTACGTA","CGTACGTA","ATCGATCG"],
	dna7:  ["ATCGATGG","CGTAGGTA","ATCGATCG","GGTACGTA","GTCGATCG","CGTACGTG","CGTAGGTA","ATCGATCG"],
	dna8:  ["GTCGCTCG","CCTACGTC","TTCAATCG","CGAACGTG","AACGTTCA","AGTACGTG","CCTACGTC","TTCAATCG"],
	dna9:  ["GCCGCTCG","CCTACGCC","TTAAATCG","CGAAAGTG","CCTACGCC","AAAGTTTG","AGGGAGTG","TTAAATCG"],
	dna10: ["AAAACTCG","CCCACGTA","ATCGGGCG","CGTATTTA","ATCTTTCG","CGTGGGTA","CCCACGTA","ATCGGGCG"],
	dna11: ["ATCCGGGG","CGCGGTTA","ATCGATCG","CGTACGTA","ATCGATCG","CGTACGTA","CGTACGTA","ATCGATCG"],
	dna12: ["ATCGATCG","CGTACGTA","ATCCAAAG","CGTACGTA","ATCGATCG","CGTACGTA","CGTACGTA","ATCCCCAG"],
	dna13: ["ATCGATCG","CGTACGTA","ATCGATCG","CGTATTTT","AAAGGGAA","CGTACGTA","CGTACGTA","ATCGATCG"],
	dna14: ["AGGGGGGG","CGTACGTA","ATCGATCG","CGTACGTA","ATCGATCG","CGGTGGTA","CGTACGTA","ATCGATCG"],
	dna15: ["ATCGATCG","CGTACGTA","ATCGATCG","CGCACGTA","ATCGATCG","CGTACGTA","CCCCCCCA","GCTAGCTA"],
};

let dnas_true = {
	dna0:  ["ATCGATCG","AGTACGTA","ATCGATCG","AGTACGTA","ATCGATCG","CCCCCGTA","CGTACGTA","ATCGATCG"],
	dna1:  ["ATCGATCG","CGTACGTA","AGCGATCG","CGTACGCA","ATGGATCG","CGTCCCCA","CGTACGTA","CGTACGTA"],
	dna2:  ["ATCAATCG","CGCAAGTA","ATCAATCG","CGCAAGGA","AACAATCG","CGCAAGTA","CGCAAGTA","ATTGATCG"],
	dna3:  ["ATCGATCA","AGTACATA","ATAGATCG","AGTACGAT","TTTAATTT","CGTACATT","CGTACATT","CGTACGAA"],
	dna4:  ["AAAACTCG","CGTATTTT","ATCGATCT","TGTACGTA","ATTGATCG","CTTACGTA","CGTACTTA","ATTGATCG"],
	dna5:  ["ACCGCCCC","CGTCCGTA","ATCGCCCC","CGTCCGTA","ATCGATCC","CGTACCTA","CGTCCGTA","CGTACCTA"],
	dna6:  ["GTCGATCG","CGTACGCG","ATCGATCG","CGTACGCG","ATCGATCG","CGTACGCG","CGTACGCG","CGTACGCG"],
	dna7:  ["ATCGATGG","CGTAAGTA","ATCGATCG","GGTAAGTA","GTCGATCG","CGTAAGTG","CGTAAGTA","ATCGATCG"],
	dna8:  ["ATCGGGCA","AAAACGTA","ATCGATTT","CCCACGTA","TTTGATCG","CCCCCGTA","CGTAGGGG","AGGGAGTG"],
	dna9:  ["GCCGCTCG","CCTACGCC","TTTTGGGG","CGATAGTG","ACTACACC","CAAGTCTG","ATCGAGTG","ATCGATCG"],
	dna10: ["ATCGATCG","CGTACGTA","AAAACCCC","CGTACGTA","ATCGATCG","CGTACGTA","CGTACGTA","CGTACGTA"],
	dna11: ["ATCCGGGG","CGGGGTTA","ATCGATCG","CGTACTTA","ATCGATCG","CGTACGTA","CGTACGTA","ATCGATCG"],
	dna12: ["ATCGATCG","CGTACGTA","ATCCCCAG","CGTACGTA","ATCGATTG","CGTACGTA","CGTACGTA","CGTACGTA"],
	dna13: ["ATCGATCG","CGTACGTA","ATCGATCG","CGATTTTT","AAAAAAGA","CGTACGTA","CGTACGTA","ATCGATCG"],
	dna14: ["ATCGATCG","CGTACGTA","ATCGATCG","CGGGGGTA","ATCGATCG","CGGGGGTA","CGTACGTA","AGGGAGTG"],
	dna15: ["ATCGATCG","TTTTTTTT","ATCGATCG","CGTACGTA","ATCGATCG","CGTACGTA","CCCCCCCC","CCCCCGTA"],
};

let dnas_oblique = {
	dna0:  ["ATCGGTCG","CGTACGTA","ATCGATGG","CGTACGTG","ATCGATCG","CATACGTA","CGAACGTA","ATCAATCG"],
	dna1:  ["ATCGATCG","CGTACGTA","ACCGATCG","CGCCCCTA","ATCGCTCG","CCTCGGTA","CGTACGTA","ATCGATCG"],
	dna3:  ["ATCAGTCG","CGGACGTG","ATTGATGG","CGTACGGG","AACGGTCG","CGCGCGTA","CGGACGTA","AGTGATCG"],
	dna3:  ["ATCGATCA","CGTACATA","ATAGATCG","CGTACGAA","ATCAATCG","CGTACATA","CGTACATA","ATAGATCG"],
	dna4:  ["TTTGATCG","TTTACTTA","TTCGATCT","CGTACGTA","ATTGATCA","CTTACGAC","CGTACAAA","ATCGACAA"],
	dna5:  ["ACCGATCG","CGTCCGTA","ATCGACCG","CGTCCGGA","ATCGAGCC","CATAGCTA","CGACCGTA","ATCAACCG"],
	dna6:  ["GTCGATCG","CGTGCGTA","ATACAACG","CGAAAATA","ATGAATCG","CGAAGATA","CGTTCGTA","ATCGATCG"],
	dna7:  ["ATCGATGG","CGTACGTA","ATCGACCG","GGTACGCA","GTCGTTCC","CGTTCGTG","CGTAGGTA","ATCGATCG"],
	dna8:  ["GTCGCTCG","CCTACGTC","TTCAATCG","CGAACGTG","AACGTTCG","AGTACGGG","CCTACGGG","TTCAGGGG"],
	dna9:  ["CCCCCTCG","CCCACGCC","CCAAATCG","CGACAGTG","CCTACGCC","AAAGTTTG","AGGGAGTG","TTAAATCG"],
	dna10: ["AAAACTCG","CCCACGTA","ATCGGGCG","CGTATTTA","ATTTTTCG","CGTGTGTA","CCCACGTA","ATCGGGCG"],
	dna11: ["ATCCGGAG","CGCGGTTA","ATCGATCG","CAGACATA","ATAGATAG","CGACCCCA","CGTACGTA","ATCGATCG"],
	dna12: ["ATCGATCT","CGTACGTA","ATCCATAG","CGTATGTA","ATCTATCG","CGTACGTA","CTTACGTA","TTCCCCAG"],
	dna13: ["ATCGATCG","CATACGTA","ATAGATCG","CGTATTTT","AAAGAGAA","CGTACATA","CGTACGAA","ATCGATCA"],
	dna14: ["AGGGGGGG","CGTACGTA","ATCGATCG","CGTAGGTA","ATCGATCG","CGGTGGTA","CGTACGTA","ATCGATCG"],
	dna15: ["ATCGATCG","CGTACGTA","ATCGATCG","CACACGTA","ATAGATCG","CGTACGTA","CCCCACCA","GCTAGCTA"],
};


Object.entries(dnas_false).forEach(([key, value]) => {
	test(`find ${key} false`, () => {
		expect(isMutant(value)).toBe(false)
	});
});

Object.entries(dnas_true).forEach(([key, value]) => {
	test(`find ${key} true`, () => {
		expect(isMutant(value)).toBe(true)
	});
});

Object.entries(dnas_oblique).forEach(([key, value]) => {
	test(`find oblique ${key} true`, () => {
		expect(isMutant(value)).toBe(true)
	});
});
